#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Cube", "Sphere_Left", "Sphere_Right", "_PlainMaterial"]
    def "_PlainMaterial" (
        active = true
        prepend references = @_PlainMaterial.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, -0.78539795, 0)
        }
    )
    {
        rel material:binding = </Root/Cube/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.92387956, 0, -0.38268337, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0.31857252, -1.6192628)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "Cube_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, -0.78539795, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_1/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.92387956, 0, -0.38268334, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0.965781, -1.6192628)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.9874472, 1, 0.61724484) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "Cube_2" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, -0.78539795, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_2/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.92387956, 0, -0.38268334, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 1.4805818, -1.6192628)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.60547733, 0.7357177, 1) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "Cube_3" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, -0.78539795, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_3/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.92387956, 0, -0.38268334, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3685196, 0.31857252, -1.2297828)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube_3/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.5470383, 0.58870983, 1) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "Cube_4" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, -0.78539795, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_4/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.92387956, 0, -0.38268334, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3685196, 0.965781, -1.2297828)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube_4/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 0.7458248, 0.69842416) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "Cube_5" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, -0.78539795, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_5/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.92387956, 0, -0.38268334, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.3685196, 1.4805818, -1.2297828)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube_5/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.56179726, 1, 0.5659444) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "Cube_6" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, -0.78539795, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_6/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.92387956, 0, -0.38268334, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.4037193, 1.4805818, -1.2297828)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube_6/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 0.74881727, 0.5005126) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "Cube_7" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, -0.78539795, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_7/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.92387956, 0, -0.38268334, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.4037193, 0.965781, -1.2297828)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube_7/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.676109, 1, 0.8204316) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "Cube_8" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, -0.78539795, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_8/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.92387956, 0, -0.38268334, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.4037193, 0.31857252, -1.2297828)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube_8/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.60538155, 0.60891813, 1) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }
}

